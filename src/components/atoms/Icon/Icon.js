import PropTypes from 'prop-types';
import IconOptions from './options';
import { useState } from 'react';
import Tippy from '@tippyjs/react';

import usePopover from '@lib/hooks/usePopover';

const ICON_CATEGORY_NAMES = Object.keys(IconOptions);
const ICON_NAMES = Object.values(IconOptions)
  .map((iconGroup) => Object.keys(iconGroup))
  .flat();

const Icon = ({ className, title, category, name, size = '1.5em' }) => {
  let Component = IconOptions[category][name];
  let accessibilityTitle = title ? title : `${name} Icon`;

  if (!Component) {
    const message = `Invalid Icon Name: ${name} for category: ${category}. Icons available under this category are: ${Object.keys(
      IconOptions[category]
    ).join(', ')}`;

    console.warn(message);

    Component = IconOptions['Alert']['Error'];
    accessibilityTitle = 'Error Icon';

    const { handleToggle, args } = usePopover(true);

    return (
      <Tippy {...args} content={message}>
        <Component
          className={className}
          onClick={handleToggle}
          title={accessibilityTitle}
          size={size}
        />
      </Tippy>
    );
  }

  return <Component className={className} title={accessibilityTitle} size={size} />;
};

Icon.propTypes = {
  /**
   * class name generated by styled components, used by styled components to override styles if necessary.
   */
  className: PropTypes.string,
  /**
   * used to give override default title given for screen readers for icons.
   */
  title: PropTypes.string,
  /**
   * The name of the Icon you wish to use that belongs to a category. This field is also the default accessibility
   * title for screen readers.
   */
  name: PropTypes.oneOf(ICON_NAMES),
  /**
   * The name of the category for the group of Icons you wish to use.
   */
  category: PropTypes.oneOf(ICON_CATEGORY_NAMES),
  /**
   * This makes the height & width of your icon the same. You can use a number which defaults to px value,
   * for any other unit you would use a string including the number & unit.
   * For more info visit https://github.com/styled-icons/styled-icons#props
   */
  size: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
};

export default Icon;
export { ICON_NAMES, ICON_CATEGORY_NAMES, IconOptions };
